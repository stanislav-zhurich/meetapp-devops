# Define your "upstream" servers - the
# servers request will be sent to
upstream application {
    least_conn;                 # Use Least Connections strategy
    server 192.168.33.11:3001;      # NodeJS Server 1
    server 10.0.2.2:3000;      # NodeJS Server 2
    #server 127.0.0.1:9002;      # NodeJS Server 3
}

# Define the Nginx server
# This will proxy any non-static directory
server {
    listen 80;

    access_log /var/log/nginx/node-access.log;
    error_log  /var/log/nginx/node-error.log error;

    # Browser and robot always look for these
    # Turn off logging for them
    location = /favicon.ico { log_not_found off; access_log off; }
    location = /robots.txt  { log_not_found off; access_log off; }

    # Handle static files so they are not proxied to NodeJS
    # You may want to also hand these requests to other upstream
    # servers, as you can define more than one!
    #location ~ ^/(images/|img/|javascript/|js/|css/|stylesheets/|flash/|media/|static/|robots.txt|humans.txt|favicon.ico) {
    #  root /var/www;
   # }
   location /resources/ {
			root /var/www/;
	}


    # pass the request to the node.js server
    # with some correct headers for proxy-awareness
    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://application/;
        proxy_redirect off;

        # Handle Web Socket connections
        #proxy_http_version 1.1;
        #proxy_set_header Upgrade $http_upgrade;
        #proxy_set_header Connection "upgrade";
    }
}

# Let's do an SSL setup also
#server {
   # listen 443;

    # You'll need to have your own certificate and key files
    # This is not something to blindly copy and paste
   # ssl on;
   # ssl_certificate     /etc/ssl/example.com/example.com.crt;
   # ssl_certificate_key /etc/ssl/example.com/example.com.key;

    # ... the rest here would be just like above ...
#}